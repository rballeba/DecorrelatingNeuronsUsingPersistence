import os
import sys

import tensorflow as tf
from keras import Sequential
from keras.layers import Flatten, Dense


class MLPTrapezium(Sequential):
    def __init__(self, input_image_size, number_of_labels):
        super().__init__()
        self.add(Flatten(input_shape=input_image_size))
        self.add(Dense(450, activation='relu'))
        self.add(Dense(350, activation='relu'))
        self.add(Dense(200, activation='relu'))
        self.add(Dense(number_of_labels))


class MLPDeepTrapezium(Sequential):
    def __init__(self, input_image_size, number_of_labels):
        super().__init__()
        self.add(Flatten(input_shape=input_image_size))
        self.add(Dense(300, activation='relu'))
        self.add(Dense(250, activation='relu'))
        self.add(Dense(200, activation='relu'))
        self.add(Dense(150, activation='relu'))
        self.add(Dense(100, activation='relu'))
        self.add(Dense(number_of_labels))


def add_dropout(model, dropout_rate):
    # Create new sequential model
    new_model = Sequential()
    for layer in model.layers:
        new_model.add(layer)
        if isinstance(layer, tf.keras.layers.Dense) and layer != model.layers[-1]:
            new_model.add(tf.keras.layers.Dropout(dropout_rate))
    return new_model


def generate_MLP_models(input_image_size, number_of_labels):
    models = []
    models.append(MLPTrapezium(input_image_size, number_of_labels))
    models.append(add_dropout(models[-1], 0.5))
    models.append(MLPDeepTrapezium(input_image_size, number_of_labels))
    return models


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print('You have to introduce the path to the folder containing the dataset generated by the script'
              ' mnist_dataset_generator.py')
    else:
        dataset_filepath = os.path.join(sys.argv[1])
        input_image_size = (28, 28, 1)
        number_of_labels = 10
        models = generate_MLP_models(input_image_size, number_of_labels)
        # Persist the models
        for i, model in enumerate(models):
            model.save(f'{dataset_filepath}/mnist_model_{i}')
